// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ErrorsErrorResponse Standardized structure for API error responses
//
// swagger:model errors.ErrorResponse
type ErrorsErrorResponse struct {

	// The category of the error
	// example: VALIDATION_ERROR
	// Example: VALIDATION_ERROR
	// Enum: ["VALIDATION_ERROR","AUTHENTICATION_ERROR","AUTHORIZATION_ERROR","RESOURCE_NOT_FOUND","RESOURCE_EXISTS","CONFLICT_ERROR","PAYLOAD_TOO_LARGE","RATE_LIMIT_EXCEEDED","SERVER_ERROR","DATABASE_ERROR","INTEGRATION_ERROR","TIMEOUT_ERROR","SERVICE_UNAVAILABLE","NETWORK_ERROR","DNS_ERROR","SSL_ERROR","BUSINESS_RULE_VIOLATION","OPERATION_NOT_ALLOWED","MALFORMED_REQUEST","UNSUPPORTED_MEDIA_TYPE","INVALID_QUERY","INVALID_REQUEST"]
	Category struct {
		ErrorCategory
	} `json:"category,omitempty"`

	// The HTTP status code
	// example: 400
	// Example: 400
	Code int64 `json:"code,omitempty"`

	// Detailed information about the error
	// example: [{"field":"email","issue":"Invalid email format"}]
	Details []*ErrorsDetail `json:"details"`

	// A human-readable error message
	// example: Invalid request parameters
	// Example: Invalid request body
	Message string `json:"message,omitempty"`

	// The status of the response (always "error" for error responses)
	// example: error
	Status string `json:"status,omitempty"`

	// The timestamp when the error occurred (RFC3339 format)
	// example: 2024-02-16T21:45:33Z
	// Example: 2024-03-15T10:30:00Z
	Timestamp string `json:"timestamp,omitempty"`

	// The unique trace ID for this request
	// example: 550e8400-e29b-41d4-a716-446655440000
	// Example: b7c5e4d3-a2b1-4f0e-8d9c-1a2b3c4d5e6f
	TraceID string `json:"trace_id,omitempty"`
}

// Validate validates this errors error response
func (m *ErrorsErrorResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var errorsErrorResponseTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VALIDATION_ERROR","AUTHENTICATION_ERROR","AUTHORIZATION_ERROR","RESOURCE_NOT_FOUND","RESOURCE_EXISTS","CONFLICT_ERROR","PAYLOAD_TOO_LARGE","RATE_LIMIT_EXCEEDED","SERVER_ERROR","DATABASE_ERROR","INTEGRATION_ERROR","TIMEOUT_ERROR","SERVICE_UNAVAILABLE","NETWORK_ERROR","DNS_ERROR","SSL_ERROR","BUSINESS_RULE_VIOLATION","OPERATION_NOT_ALLOWED","MALFORMED_REQUEST","UNSUPPORTED_MEDIA_TYPE","INVALID_QUERY","INVALID_REQUEST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		errorsErrorResponseTypeCategoryPropEnum = append(errorsErrorResponseTypeCategoryPropEnum, v)
	}
}

// prop value enum
func (m *ErrorsErrorResponse) validateCategoryEnum(path, location string, value *struct {
	ErrorCategory
}) error {
	if err := validate.EnumCase(path, location, value, errorsErrorResponseTypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ErrorsErrorResponse) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	return nil
}

func (m *ErrorsErrorResponse) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.Details) { // not required
		return nil
	}

	for i := 0; i < len(m.Details); i++ {
		if swag.IsZero(m.Details[i]) { // not required
			continue
		}

		if m.Details[i] != nil {
			if err := m.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this errors error response based on the context it is used
func (m *ErrorsErrorResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorsErrorResponse) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ErrorsErrorResponse) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Details); i++ {

		if m.Details[i] != nil {

			if swag.IsZero(m.Details[i]) { // not required
				return nil
			}

			if err := m.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrorsErrorResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorsErrorResponse) UnmarshalBinary(b []byte) error {
	var res ErrorsErrorResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
