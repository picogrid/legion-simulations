// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Category Entity category classification
//
// swagger:model Category
type Category string

func NewCategory(value Category) *Category {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Category.
func (m Category) Pointer() *Category {
	return &m
}

const (

	// CategoryDEVICE captures enum value "DEVICE"
	CategoryDEVICE Category = "DEVICE"

	// CategoryDETECTION captures enum value "DETECTION"
	CategoryDETECTION Category = "DETECTION"

	// CategoryALERT captures enum value "ALERT"
	CategoryALERT Category = "ALERT"

	// CategoryWEATHER captures enum value "WEATHER"
	CategoryWEATHER Category = "WEATHER"

	// CategoryGEOMETRIC captures enum value "GEOMETRIC"
	CategoryGEOMETRIC Category = "GEOMETRIC"

	// CategoryZONE captures enum value "ZONE"
	CategoryZONE Category = "ZONE"

	// CategorySENSOR captures enum value "SENSOR"
	CategorySENSOR Category = "SENSOR"

	// CategoryVEHICLE captures enum value "VEHICLE"
	CategoryVEHICLE Category = "VEHICLE"

	// CategoryUXV captures enum value "UXV"
	CategoryUXV Category = "UXV"

	// CategoryINSTALLATION captures enum value "INSTALLATION"
	CategoryINSTALLATION Category = "INSTALLATION"

	// CategoryPERSONNEL captures enum value "PERSONNEL"
	CategoryPERSONNEL Category = "PERSONNEL"

	// CategoryEQUIPMENT captures enum value "EQUIPMENT"
	CategoryEQUIPMENT Category = "EQUIPMENT"

	// CategorySYSTEM captures enum value "SYSTEM"
	CategorySYSTEM Category = "SYSTEM"
)

// for schema
var categoryEnum []interface{}

func init() {
	var res []Category
	if err := json.Unmarshal([]byte(`["DEVICE","DETECTION","ALERT","WEATHER","GEOMETRIC","ZONE","SENSOR","VEHICLE","UXV","INSTALLATION","PERSONNEL","EQUIPMENT","SYSTEM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		categoryEnum = append(categoryEnum, v)
	}
}

func (m Category) validateCategoryEnum(path, location string, value Category) error {
	if err := validate.EnumCase(path, location, value, categoryEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this category
func (m Category) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCategoryEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this category based on context it is used
func (m Category) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
