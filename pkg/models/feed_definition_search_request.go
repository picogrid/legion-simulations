// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeedDefinitionSearchRequest feed definition search request
//
// swagger:model FeedDefinitionSearchRequest
type FeedDefinitionSearchRequest struct {

	// category
	Category MessageCategory `json:"category,omitempty"`

	// entity id
	// Format: uuid
	EntityID strfmt.UUID `json:"entity_id,omitempty"`

	// is active
	IsActive bool `json:"is_active,omitempty"`
}

// Validate validates this feed definition search request
func (m *FeedDefinitionSearchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeedDefinitionSearchRequest) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if err := m.Category.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("category")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("category")
		}
		return err
	}

	return nil
}

func (m *FeedDefinitionSearchRequest) validateEntityID(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityID) { // not required
		return nil
	}

	if err := validate.FormatOf("entity_id", "body", "uuid", m.EntityID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this feed definition search request based on the context it is used
func (m *FeedDefinitionSearchRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeedDefinitionSearchRequest) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if err := m.Category.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("category")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("category")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeedDefinitionSearchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeedDefinitionSearchRequest) UnmarshalBinary(b []byte) error {
	var res FeedDefinitionSearchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
