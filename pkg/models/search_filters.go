// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchFilters search filters
//
// swagger:model SearchFilters
type SearchFilters struct {

	// Filter by affiliations
	Affiliation []Affiliation `json:"affiliation"`

	// Filter by categories
	Category []Category `json:"category"`

	// Filter by entity name (partial match)
	Name string `json:"name,omitempty"`

	// Filter by status
	Status string `json:"status,omitempty"`

	// Filter by entity type
	Type string `json:"type,omitempty"`
}

// Validate validates this search filters
func (m *SearchFilters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffiliation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchFilters) validateAffiliation(formats strfmt.Registry) error {
	if swag.IsZero(m.Affiliation) { // not required
		return nil
	}

	for i := 0; i < len(m.Affiliation); i++ {

		if err := m.Affiliation[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliation" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SearchFilters) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	for i := 0; i < len(m.Category); i++ {

		if err := m.Category[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("category" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this search filters based on the context it is used
func (m *SearchFilters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAffiliation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchFilters) contextValidateAffiliation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Affiliation); i++ {

		if swag.IsZero(m.Affiliation[i]) { // not required
			return nil
		}

		if err := m.Affiliation[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliation" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SearchFilters) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Category); i++ {

		if swag.IsZero(m.Category[i]) { // not required
			return nil
		}

		if err := m.Category[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("category" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchFilters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchFilters) UnmarshalBinary(b []byte) error {
	var res SearchFilters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
