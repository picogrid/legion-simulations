// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ErrorCategory Represents the category of an error for classification and handling
//
// swagger:model ErrorCategory
type ErrorCategory string

func NewErrorCategory(value ErrorCategory) *ErrorCategory {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ErrorCategory.
func (m ErrorCategory) Pointer() *ErrorCategory {
	return &m
}

const (

	// ErrorCategoryVALIDATIONERROR captures enum value "VALIDATION_ERROR"
	ErrorCategoryVALIDATIONERROR ErrorCategory = "VALIDATION_ERROR"

	// ErrorCategoryAUTHENTICATIONERROR captures enum value "AUTHENTICATION_ERROR"
	ErrorCategoryAUTHENTICATIONERROR ErrorCategory = "AUTHENTICATION_ERROR"

	// ErrorCategoryAUTHORIZATIONERROR captures enum value "AUTHORIZATION_ERROR"
	ErrorCategoryAUTHORIZATIONERROR ErrorCategory = "AUTHORIZATION_ERROR"

	// ErrorCategoryRESOURCENOTFOUND captures enum value "RESOURCE_NOT_FOUND"
	ErrorCategoryRESOURCENOTFOUND ErrorCategory = "RESOURCE_NOT_FOUND"

	// ErrorCategoryRESOURCEEXISTS captures enum value "RESOURCE_EXISTS"
	ErrorCategoryRESOURCEEXISTS ErrorCategory = "RESOURCE_EXISTS"

	// ErrorCategoryCONFLICTERROR captures enum value "CONFLICT_ERROR"
	ErrorCategoryCONFLICTERROR ErrorCategory = "CONFLICT_ERROR"

	// ErrorCategoryPAYLOADTOOLARGE captures enum value "PAYLOAD_TOO_LARGE"
	ErrorCategoryPAYLOADTOOLARGE ErrorCategory = "PAYLOAD_TOO_LARGE"

	// ErrorCategoryRATELIMITEXCEEDED captures enum value "RATE_LIMIT_EXCEEDED"
	ErrorCategoryRATELIMITEXCEEDED ErrorCategory = "RATE_LIMIT_EXCEEDED"

	// ErrorCategorySERVERERROR captures enum value "SERVER_ERROR"
	ErrorCategorySERVERERROR ErrorCategory = "SERVER_ERROR"

	// ErrorCategoryDATABASEERROR captures enum value "DATABASE_ERROR"
	ErrorCategoryDATABASEERROR ErrorCategory = "DATABASE_ERROR"

	// ErrorCategoryINTEGRATIONERROR captures enum value "INTEGRATION_ERROR"
	ErrorCategoryINTEGRATIONERROR ErrorCategory = "INTEGRATION_ERROR"

	// ErrorCategoryTIMEOUTERROR captures enum value "TIMEOUT_ERROR"
	ErrorCategoryTIMEOUTERROR ErrorCategory = "TIMEOUT_ERROR"

	// ErrorCategorySERVICEUNAVAILABLE captures enum value "SERVICE_UNAVAILABLE"
	ErrorCategorySERVICEUNAVAILABLE ErrorCategory = "SERVICE_UNAVAILABLE"

	// ErrorCategoryNETWORKERROR captures enum value "NETWORK_ERROR"
	ErrorCategoryNETWORKERROR ErrorCategory = "NETWORK_ERROR"

	// ErrorCategoryDNSERROR captures enum value "DNS_ERROR"
	ErrorCategoryDNSERROR ErrorCategory = "DNS_ERROR"

	// ErrorCategorySSLERROR captures enum value "SSL_ERROR"
	ErrorCategorySSLERROR ErrorCategory = "SSL_ERROR"

	// ErrorCategoryBUSINESSRULEVIOLATION captures enum value "BUSINESS_RULE_VIOLATION"
	ErrorCategoryBUSINESSRULEVIOLATION ErrorCategory = "BUSINESS_RULE_VIOLATION"

	// ErrorCategoryOPERATIONNOTALLOWED captures enum value "OPERATION_NOT_ALLOWED"
	ErrorCategoryOPERATIONNOTALLOWED ErrorCategory = "OPERATION_NOT_ALLOWED"

	// ErrorCategoryMALFORMEDREQUEST captures enum value "MALFORMED_REQUEST"
	ErrorCategoryMALFORMEDREQUEST ErrorCategory = "MALFORMED_REQUEST"

	// ErrorCategoryUNSUPPORTEDMEDIATYPE captures enum value "UNSUPPORTED_MEDIA_TYPE"
	ErrorCategoryUNSUPPORTEDMEDIATYPE ErrorCategory = "UNSUPPORTED_MEDIA_TYPE"

	// ErrorCategoryINVALIDQUERY captures enum value "INVALID_QUERY"
	ErrorCategoryINVALIDQUERY ErrorCategory = "INVALID_QUERY"

	// ErrorCategoryINVALIDREQUEST captures enum value "INVALID_REQUEST"
	ErrorCategoryINVALIDREQUEST ErrorCategory = "INVALID_REQUEST"
)

// for schema
var errorCategoryEnum []interface{}

func init() {
	var res []ErrorCategory
	if err := json.Unmarshal([]byte(`["VALIDATION_ERROR","AUTHENTICATION_ERROR","AUTHORIZATION_ERROR","RESOURCE_NOT_FOUND","RESOURCE_EXISTS","CONFLICT_ERROR","PAYLOAD_TOO_LARGE","RATE_LIMIT_EXCEEDED","SERVER_ERROR","DATABASE_ERROR","INTEGRATION_ERROR","TIMEOUT_ERROR","SERVICE_UNAVAILABLE","NETWORK_ERROR","DNS_ERROR","SSL_ERROR","BUSINESS_RULE_VIOLATION","OPERATION_NOT_ALLOWED","MALFORMED_REQUEST","UNSUPPORTED_MEDIA_TYPE","INVALID_QUERY","INVALID_REQUEST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		errorCategoryEnum = append(errorCategoryEnum, v)
	}
}

func (m ErrorCategory) validateErrorCategoryEnum(path, location string, value ErrorCategory) error {
	if err := validate.EnumCase(path, location, value, errorCategoryEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this error category
func (m ErrorCategory) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateErrorCategoryEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this error category based on context it is used
func (m ErrorCategory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
