// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateFeedDefinitionRequest create feed definition request
//
// swagger:model CreateFeedDefinitionRequest
type CreateFeedDefinitionRequest struct {

	// category
	// Required: true
	Category *MessageCategory `json:"category"`

	// MIME type of the data
	// Example: application/json
	// Required: true
	DataType *string `json:"data_type"`

	// Description of the feed
	Description string `json:"description,omitempty"`

	// Associated entity ID
	// Format: uuid
	EntityID strfmt.UUID `json:"entity_id,omitempty"`

	// Name of the feed
	// Required: true
	FeedName *string `json:"feed_name"`

	// Whether the feed is active
	// Required: true
	IsActive *bool `json:"is_active"`
}

// Validate validates this create feed definition request
func (m *CreateFeedDefinitionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeedName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsActive(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateFeedDefinitionRequest) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	if m.Category != nil {
		if err := m.Category.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("category")
			}
			return err
		}
	}

	return nil
}

func (m *CreateFeedDefinitionRequest) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("data_type", "body", m.DataType); err != nil {
		return err
	}

	return nil
}

func (m *CreateFeedDefinitionRequest) validateEntityID(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityID) { // not required
		return nil
	}

	if err := validate.FormatOf("entity_id", "body", "uuid", m.EntityID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateFeedDefinitionRequest) validateFeedName(formats strfmt.Registry) error {

	if err := validate.Required("feed_name", "body", m.FeedName); err != nil {
		return err
	}

	return nil
}

func (m *CreateFeedDefinitionRequest) validateIsActive(formats strfmt.Registry) error {

	if err := validate.Required("is_active", "body", m.IsActive); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create feed definition request based on the context it is used
func (m *CreateFeedDefinitionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateFeedDefinitionRequest) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.Category != nil {

		if err := m.Category.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("category")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateFeedDefinitionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateFeedDefinitionRequest) UnmarshalBinary(b []byte) error {
	var res CreateFeedDefinitionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
