// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateEntityRequest update entity request
//
// swagger:model UpdateEntityRequest
type UpdateEntityRequest struct {

	// affiliation
	Affiliation Affiliation `json:"affiliation,omitempty"`

	// category
	Category Category `json:"category,omitempty"`

	// The unique identifier of the entity to be updated
	// Example: a1b2c3d4-e5f6-7890-1234-567890abcdef
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// New or updated metadata for the entity (JSON object). This will replace existing metadata
	// Example: {"firmware":"v2.1","ip_address":"192.168.1.101"}
	Metadata interface{} `json:"metadata,omitempty"`

	// The new name for the entity
	// Example: Axis Camera
	Name string `json:"name,omitempty"`

	// The new status for the entity
	// Example: inactive
	Status string `json:"status,omitempty"`

	// The new type for the entity
	// Example: PTZ Camera
	Type string `json:"type,omitempty"`
}

// Validate validates this update entity request
func (m *UpdateEntityRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffiliation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateEntityRequest) validateAffiliation(formats strfmt.Registry) error {
	if swag.IsZero(m.Affiliation) { // not required
		return nil
	}

	if err := m.Affiliation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("affiliation")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("affiliation")
		}
		return err
	}

	return nil
}

func (m *UpdateEntityRequest) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if err := m.Category.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("category")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("category")
		}
		return err
	}

	return nil
}

func (m *UpdateEntityRequest) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update entity request based on the context it is used
func (m *UpdateEntityRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAffiliation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateEntityRequest) contextValidateAffiliation(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Affiliation) { // not required
		return nil
	}

	if err := m.Affiliation.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("affiliation")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("affiliation")
		}
		return err
	}

	return nil
}

func (m *UpdateEntityRequest) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if err := m.Category.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("category")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("category")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateEntityRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateEntityRequest) UnmarshalBinary(b []byte) error {
	var res UpdateEntityRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
