// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MessageCategory Feed message category
//
// swagger:model MessageCategory
type MessageCategory string

func NewMessageCategory(value MessageCategory) *MessageCategory {
	return &value
}

// Pointer returns a pointer to a freshly-allocated MessageCategory.
func (m MessageCategory) Pointer() *MessageCategory {
	return &m
}

const (

	// MessageCategoryMESSAGE captures enum value "MESSAGE"
	MessageCategoryMESSAGE MessageCategory = "MESSAGE"

	// MessageCategoryFILE captures enum value "FILE"
	MessageCategoryFILE MessageCategory = "FILE"
)

// for schema
var messageCategoryEnum []interface{}

func init() {
	var res []MessageCategory
	if err := json.Unmarshal([]byte(`["MESSAGE","FILE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		messageCategoryEnum = append(messageCategoryEnum, v)
	}
}

func (m MessageCategory) validateMessageCategoryEnum(path, location string, value MessageCategory) error {
	if err := validate.EnumCase(path, location, value, messageCategoryEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this message category
func (m MessageCategory) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMessageCategoryEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this message category based on context it is used
func (m MessageCategory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
