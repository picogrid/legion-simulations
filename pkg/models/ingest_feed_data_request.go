// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IngestFeedDataRequest ingest feed data request
//
// swagger:model IngestFeedDataRequest
type IngestFeedDataRequest struct {

	// entity id
	// Required: true
	// Format: uuid
	EntityID *strfmt.UUID `json:"entity_id"`

	// feed definition id
	// Required: true
	// Format: uuid
	FeedDefinitionID *strfmt.UUID `json:"feed_definition_id"`

	// The data payload
	Payload interface{} `json:"payload,omitempty"`

	// recorded at
	// Required: true
	// Format: date-time
	RecordedAt *strfmt.DateTime `json:"recorded_at"`
}

// Validate validates this ingest feed data request
func (m *IngestFeedDataRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeedDefinitionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecordedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestFeedDataRequest) validateEntityID(formats strfmt.Registry) error {

	if err := validate.Required("entity_id", "body", m.EntityID); err != nil {
		return err
	}

	if err := validate.FormatOf("entity_id", "body", "uuid", m.EntityID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IngestFeedDataRequest) validateFeedDefinitionID(formats strfmt.Registry) error {

	if err := validate.Required("feed_definition_id", "body", m.FeedDefinitionID); err != nil {
		return err
	}

	if err := validate.FormatOf("feed_definition_id", "body", "uuid", m.FeedDefinitionID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IngestFeedDataRequest) validateRecordedAt(formats strfmt.Registry) error {

	if err := validate.Required("recorded_at", "body", m.RecordedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("recorded_at", "body", "date-time", m.RecordedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ingest feed data request based on context it is used
func (m *IngestFeedDataRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IngestFeedDataRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestFeedDataRequest) UnmarshalBinary(b []byte) error {
	var res IngestFeedDataRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
