// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Affiliation NATO Joint Military Symbology (MIL-STD-2525D/APP-6D) Affiliation Codes
//
// swagger:model Affiliation
type Affiliation string

func NewAffiliation(value Affiliation) *Affiliation {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Affiliation.
func (m Affiliation) Pointer() *Affiliation {
	return &m
}

const (

	// AffiliationPENDING captures enum value "PENDING"
	AffiliationPENDING Affiliation = "PENDING"

	// AffiliationUNKNOWN captures enum value "UNKNOWN"
	AffiliationUNKNOWN Affiliation = "UNKNOWN"

	// AffiliationASSUMEDFRIEND captures enum value "ASSUMED_FRIEND"
	AffiliationASSUMEDFRIEND Affiliation = "ASSUMED_FRIEND"

	// AffiliationFRIEND captures enum value "FRIEND"
	AffiliationFRIEND Affiliation = "FRIEND"

	// AffiliationNEUTRAL captures enum value "NEUTRAL"
	AffiliationNEUTRAL Affiliation = "NEUTRAL"

	// AffiliationSUSPECT captures enum value "SUSPECT"
	AffiliationSUSPECT Affiliation = "SUSPECT"

	// AffiliationHOSTILE captures enum value "HOSTILE"
	AffiliationHOSTILE Affiliation = "HOSTILE"

	// AffiliationEXERCISEPENDING captures enum value "EXERCISE_PENDING"
	AffiliationEXERCISEPENDING Affiliation = "EXERCISE_PENDING"

	// AffiliationEXERCISEUNKNOWN captures enum value "EXERCISE_UNKNOWN"
	AffiliationEXERCISEUNKNOWN Affiliation = "EXERCISE_UNKNOWN"

	// AffiliationEXERCISEFRIEND captures enum value "EXERCISE_FRIEND"
	AffiliationEXERCISEFRIEND Affiliation = "EXERCISE_FRIEND"

	// AffiliationEXERCISENEUTRAL captures enum value "EXERCISE_NEUTRAL"
	AffiliationEXERCISENEUTRAL Affiliation = "EXERCISE_NEUTRAL"

	// AffiliationEXERCISEASSUMEDFRIEND captures enum value "EXERCISE_ASSUMED_FRIEND"
	AffiliationEXERCISEASSUMEDFRIEND Affiliation = "EXERCISE_ASSUMED_FRIEND"

	// AffiliationJOKER captures enum value "JOKER"
	AffiliationJOKER Affiliation = "JOKER"

	// AffiliationFAKER captures enum value "FAKER"
	AffiliationFAKER Affiliation = "FAKER"

	// AffiliationNONESPECIFIED captures enum value "NONE_SPECIFIED"
	AffiliationNONESPECIFIED Affiliation = "NONE_SPECIFIED"
)

// for schema
var affiliationEnum []interface{}

func init() {
	var res []Affiliation
	if err := json.Unmarshal([]byte(`["PENDING","UNKNOWN","ASSUMED_FRIEND","FRIEND","NEUTRAL","SUSPECT","HOSTILE","EXERCISE_PENDING","EXERCISE_UNKNOWN","EXERCISE_FRIEND","EXERCISE_NEUTRAL","EXERCISE_ASSUMED_FRIEND","JOKER","FAKER","NONE_SPECIFIED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		affiliationEnum = append(affiliationEnum, v)
	}
}

func (m Affiliation) validateAffiliationEnum(path, location string, value Affiliation) error {
	if err := validate.EnumCase(path, location, value, affiliationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this affiliation
func (m Affiliation) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAffiliationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this affiliation based on context it is used
func (m Affiliation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
